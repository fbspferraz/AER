node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0820::2/64
	!
    }
    canvas c1
    iconcoords {701.0 150.0}
    labelcoords {701.0 182.0}
    interface-peer {eth0 n2}
    services {OSPFv3 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:820::2/64
	!
	router ospf6
	  router-id 0.0.0.1
	  redistribute connected
	  interface eth0 area 0.0.0.0
	!
	
	}
    }
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth2
	 ipv6 address 2001:0690:2280:0822::2/64
	!
	interface eth1
	 ipv6 address 2001:0690:2280:0821::2/64
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0820::1/64
	!
    }
    canvas c1
    iconcoords {586.0 276.0}
    labelcoords {586.0 308.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n5}
    interface-peer {eth2 n12}
    services {OSPFv3 zebra IPForward}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('sender', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:sender
	custom-command sender
	config {
	#test sending file over udp sender 
	
	from socket import *
	import sys
	
	s = socket(AF_INET6,SOCK_DGRAM)  #socket udp ipv6
	host = sys.argv[1]               #var para entrada de arg na cmd 
	port = 36363                     #porta utilizada
	buf = 1024                       #buffer size
	addr = (host,port)               #tuplo com o ip e port
	
	file_name=sys.argv[2]            #var que vai receber o nome do file via arg na cmd
	
	s.sendto(file_name.encode('utf-8'),addr)    #enviar o nome do file
	
	f=open(file_name,"r")           #abrir o file
	data = f.read(buf)              #ler o file
	while (data):
	    if(s.sendto(data,addr)):    #enviar o file
	        print ("sending ...")
	        data = f.read(buf) 
	
	s.close()   #fechar socket
	f.close()   #fechar file
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:820::1/64
	!
	interface eth1
	  
	  ipv6 address 2001:690:2280:821::2/64
	!
	interface eth2
	  
	  ipv6 address 2001:690:2280:822::2/64
	!
	router ospf6
	  router-id 0.0.0.2
	  redistribute connected
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	  interface eth2 area 0.0.0.0
	!
	
	}
    }
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0825::1/64
	!
	interface eth1
	 ipv6 address 2001:0690:2280:0827::2/64
	!
	interface eth2
	 ipv6 address 2001:0690:2280:0828::2/64
	!
    }
    canvas c1
    iconcoords {605.0 571.0}
    labelcoords {605.0 603.0}
    interface-peer {eth2 n6}
    services {OSPFv3 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:825::1/64
	!
	interface eth1
	  
	  ipv6 address 2001:690:2280:827::2/64
	!
	interface eth2
	  
	  ipv6 address 2001:690:2280:828::2/64
	!
	router ospf6
	  router-id 0.0.0.4
	  redistribute connected
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	  interface eth2 area 0.0.0.0
	!
	
	}
    }
    interface-peer {eth1 n7}
    interface-peer {eth0 n3}
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth1
	 ipv6 address 2001:0690:2280:0823::2/64
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0821::1/64
	!
    }
    canvas c1
    iconcoords {625.0 422.0}
    labelcoords {625.0 454.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n8}
    services {OSPFv3 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:821::1/64
	!
	interface eth1
	  
	  ipv6 address 2001:690:2280:823::2/64
	!
	router ospf6
	  router-id 0.0.0.5
	  redistribute connected
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	!
	
	}
    }
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0828::1/64
	!
    }
    canvas c1
    iconcoords {357.0 507.0}
    labelcoords {357.0 539.0}
    interface-peer {eth0 n4}
    services {OSPFv3 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:828::1/64
	!
	interface eth1
	  
	  ipv6 address 2001:690:2280:830::1/64
	!
	router ospf6
	  router-id 0.0.0.6
	  redistribute connected
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	!
	
	}
    }
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth1
	 ipv6 address 2001:0690:2280:0824::1/64
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0823::1/64
	!
    }
    canvas c1
    iconcoords {923.0 184.0}
    labelcoords {923.0 216.0}
    interface-peer {eth0 n5}
    services {OSPFv3 zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:823::1/64
	!
	interface eth1
	  
	  ipv6 address 2001:690:2280:824::1/64
	!
	router ospf6
	  router-id 0.0.0.8
	  redistribute connected
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	!
	
	}
    }
    interface-peer {eth1 n3}
}

node n12 {
    type router
    model host
    network-config {
	hostname n12
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0822::1/60
	!
    }
    canvas c1
    iconcoords {348.0 399.0}
    labelcoords {348.0 431.0}
    interface-peer {eth0 n2}
    services {OSPFv3 zebra DefaultRoute SSH}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('receiver', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:receiver
	custom-command receiver
	config {
	#test sending file over udp receiver
	
	#!/usr/bin/env python
	
	from socket import *
	
	host= "2001:0690:2280:0822::1"    #ip do host
	port = 36363                      #porta utilizada
	s = socket(AF_INET6,SOCK_DGRAM)   #socket udp ipv6
	s.bind((host,port))               #bind do socket ao ip e port
	
	addr = (host,port)  #tuplo do addr
	buf=1024            #buffer size
	
	data,addr = s.recvfrom(buf)             #receber dados via a socket
	print ("Received File:",data.strip())   #print do nome do file recebido
	
	f = open(data.strip(),'wb')             #abrir file recebido
	data,addr = s.recvfrom(buf)
	
	#try para ler dados da socket 
	try:
	    while(data):
	        f.write(data)
	        s.settimeout(2)
	        data,addr = s.recvfrom(buf)
	except timeout:
	    f.close()
	    s.close()
	    print ("File Downloaded")
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ipv6 address 2001:690:2280:822::1/64
	!
	router ospf6
	  router-id 0.0.0.12
	  interface eth0 area 0.0.0.0
	!
	}
    }
}

node n16 {
    type wlan
    network-config {
	hostname wlan16
	!
	interface wireless
	 ip address 10.0.0.0/32
	 ipv6 address 2001:0::0/128
	!
	mobmodel
	coreapi
	basic_range
	ns2script
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=275
	bandwidth=54000000
	jitter=0
	delay=20000
	error=0
	}
    }
    custom-config {
	custom-config-id ns2script
	custom-command {10 3 11 10 10 10 10 10}
	config {
	file=/home/core/Documents/move.scen
	refresh_ms=50
	loop=1
	autostart=
	map=
	script_start=
	script_pause=
	script_stop=
	}
    }
    canvas c1
    iconcoords {1010.0 573.0}
    labelcoords {1010.0 605.0}
    interface-peer {e0 n9}
    interface-peer {e1 n11}
    interface-peer {e2 n14}
    interface-peer {e3 n10}
    interface-peer {e4 n15}
    interface-peer {e5 n13}
    interface-peer {e7 n7}
    interface-peer {e6 n3}
}

node n9 {
    type router
    model mdr
    network-config {
	hostname n9
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0826::8/64
	!
    }
    canvas c1
    iconcoords {625.0 21.0}
    labelcoords {625.0 53.0}
    interface-peer {eth0 n16}
    services {OSPFv3 OSPFv3MDR zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:826::8/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	
	router ospf6
	  router-id 0.0.0.9
	  interface eth0 area 0.0.0.0
	  redistribute connected
	!
	
	}
    }
}

node n10 {
    type router
    model mdr
    network-config {
	hostname n10
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0826::5/64
	!
    }
    canvas c1
    iconcoords {874.0 794.0}
    labelcoords {874.0 826.0}
    interface-peer {eth0 n16}
    services {OSPFv3 OSPFv3MDR zebra IPForward UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('client', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:client
	custom-command client
	config {
	#! /usr/bin/python3
	import socket
	import sys
	import os
	
	TTL = 3
	BUFFER_SIZE = 1024
	IP_ADDR = '2001:0690:2280:0826::5'
	UDP_PORT = 9999
	
	def main(argv):
	    print("hello")
	    filename = sys.argv[1]
	
	    c = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
	    c.settimeout(TTL)
	    c.sendto(filename.encode(), (IP_ADDR, UDP_PORT))
	    response, client_addr = c.recvfrom(BUFFER_SIZE)
	    message = response.decode('utf8')
	
	    if message == 'file-not-found':
	        print("{} not found on server".format(filename))
	        c.close()
	        sys.exit(0)
	
	    if os.path.exists(filename):
	        os.remove(filename)
	
	    if message == 'file-found':
	        print("Downloading...")
	        
	    file = open(filename,'wb')
	
	    data,addr = c.recvfrom(BUFFER_SIZE)
	    try:
	        while(data):
	            file.write(data)
	            c.settimeout(TTL)
	            data, addr = c.recvfrom(BUFFER_SIZE)
	    except:
	        file.close()
	        c.close()
	        #with open(filename, 'wb') as file:
	        #    while True:
	        #        data = c.recvfrom(BUFFER_SIZE)
	
	        #        if not data:
	        #            break
	        #        file.write(data)
	
	    print("Successfully downloaded!")
	
	        
	
	if __name__ == "__main__":
	    main(sys.argv[1:])
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:826::5/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	router ospf6
	  router-id 0.0.0.10
	  interface eth0 area 0.0.0.0
	  redistribute connected
	!
	
	}
    }
}

node n11 {
    type router
    model mdr
    network-config {
	hostname n11
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0826::3/64
	!
    }
    canvas c1
    iconcoords {34.0 529.0}
    labelcoords {34.0 561.0}
    interface-peer {eth0 n16}
    services {OSPFv3 OSPFv3MDR zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:826::3/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	interface lo
	  ipv6 address ::11
	!
	router ospf6
	  router-id 0.0.0.11
	  redistribute connected
	  interface eth0 area 0.0.0.0
	!
	
	}
    }
}

node n13 {
    type router
    model mdr
    network-config {
	hostname n13
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0826::7/64
	!
    }
    canvas c1
    iconcoords {116.0 671.0}
    labelcoords {116.0 703.0}
    interface-peer {eth0 n16}
    services {OSPFv3 OSPFv3MDR zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:826::7/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	
	router ospf6
	  router-id 0.0.0.13
	  interface eth0 area 0.0.0.0
	  redistribute connected
	!
	
	}
    }
}

node n14 {
    type router
    model mdr
    network-config {
	hostname n14
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0826::4/64
	!
    }
    canvas c1
    iconcoords {232.0 422.0}
    labelcoords {232.0 454.0}
    interface-peer {eth0 n16}
    services {OSPFv3MDR zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:826::4/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	interface lo
	  ipv6 address ::14
	!
	
	router ospf6
	  router-id 0.0.0.14
	  interface eth0 area 0.0.0.0
	  redistribute connected
	!
	
	}
    }
}

node n15 {
    type router
    model mdr
    network-config {
	hostname n15
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0826::6/64
	!
    }
    canvas c1
    iconcoords {1137.0 375.0}
    labelcoords {1137.0 407.0}
    interface-peer {eth0 n16}
    services {OSPFv3 OSPFv3MDR zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:826::6/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	router ospf6
	  router-id 0.0.0.15
	  redistribute connected
	  interface eth0 area 0.0.0.0
	!
	
	}
    }
}

node n7 {
    type router
    model mdr
    network-config {
	hostname n7
	!
	interface eth1
	 ipv6 address 2001:0690:2280:0826::1/64
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0827::1/64
	!
    }
    canvas c1
    iconcoords {842.0 622.0}
    labelcoords {842.0 654.0}
    interface-peer {eth0 n4}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:827::1/64
	!
	interface eth1
	  
	  ipv6 address 2001:690:2280:826::1/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	
	router ospf6
	  router-id 0.0.0.7
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	!
	
	}
    }
    services {OSPFv3MDR zebra IPForward}
    interface-peer {eth1 n16}
}

node n3 {
    type router
    model mdr
    network-config {
	hostname n3
	!
	interface eth2
	 ipv6 address 2001:0690:2280:0826::2/64
	!
	interface eth1
	 ipv6 address 2001:0690:2280:0825::2/64
	!
	interface eth0
	 ipv6 address 2001:0690:2280:0824::2/64
	!
    }
    canvas c1
    iconcoords {795.0 457.0}
    labelcoords {795.0 489.0}
    interface-peer {eth0 n8}
    interface-peer {eth1 n4}
    interface-peer {eth2 n16}
    services {OSPFv3 OSPFv3MDR zebra IPForward}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  
	  ipv6 address 2001:690:2280:824::2/64
	!
	interface eth1
	  
	  ipv6 address 2001:690:2280:825::2/64
	!
	interface eth2
	  
	  ipv6 address 2001:690:2280:826::2/64
	  ipv6 ospf6 hello-interval 2
	  ipv6 ospf6 dead-interval 6
	  ipv6 ospf6 retransmit-interval 5
	  ipv6 ospf6 network manet-designated-router
	  ipv6 ospf6 twohoprefresh 3
	  ipv6 ospf6 adjacencyconnectivity uniconnected
	  ipv6 ospf6 lsafullness mincostlsa
	!
	router ospf6
	  router-id 0.0.0.3
	  redistribute connected
	  interface eth0 area 0.0.0.0
	  interface eth1 area 0.0.0.0
	  interface eth2 area 0.0.0.0
	!
	
	}
    }
}

link l7 {
    nodes {n1 n2}
    bandwidth 0
}

link l8 {
    nodes {n2 n5}
    bandwidth 0
}

link l9 {
    nodes {n5 n8}
    bandwidth 0
}

link l13 {
    nodes {n4 n6}
    bandwidth 0
}

link l16 {
    nodes {n12 n2}
    bandwidth 0
}

link l1 {
    nodes {n16 n9}
}

link l2 {
    nodes {n16 n11}
}

link l3 {
    nodes {n16 n14}
}

link l4 {
    nodes {n16 n10}
}

link l5 {
    nodes {n16 n15}
}

link l6 {
    nodes {n16 n13}
}

link l12 {
    nodes {n4 n7}
    bandwidth 0
}

link l15 {
    nodes {n16 n7}
}

link l10 {
    nodes {n8 n3}
    bandwidth 0
}

link l11 {
    nodes {n3 n4}
    bandwidth 0
}

link l14 {
    nodes {n16 n3}
}

canvas c1 {
    name {Canvas1}
    refpt {0 0 47.5791667 -122.132322 2.0}
    scale {150.0}
    size {1500 1000}
}

option global {
    interface_names no
    ip_addresses no
    ipv6_addresses yes
    node_labels yes
    link_labels no
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

